{
  "questions": [
    {
      "question": "¿Qué garantiza el uso de objetos protegidos en Ada?",
      "options": [
        "Acceso seguro a datos compartidos mediante exclusión mutua.",
        "Requiere menos memoria que usar tareas.",
        "Evita la necesidad de declarar entradas.",
        "Permite ejecutar múltiples tareas en paralelo sin restricciones."
      ],
      "correct_option": 0,
      "questionType": "singleChoice"
    },
    {
      "question": "Estás programando una pila y no quieres que el usuario pueda modificar directamente su estructura interna. ¿Qué opción es más adecuada en Ada?",
      "options": [
        "Declarar todo en el cuerpo del paquete como privado.",
        "Usar solo funciones públicas sin tipos privados.",
        "Permitir acceso directo a las variables privadas.",
        "Declarar un tipo privado en la especificación del paquete."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Cuál es la ventaja de combinar `select`, `guardas` y `delay`?",
      "options": [
        "Se puede ejecutar código en paralelo sin sincronización.",
        "Permite crear tareas reactivas y no bloqueantes.",
        "Se garantiza que las tareas terminen en menos de 1 segundo.",
        "Se evita el uso de tipos de datos."
      ],
      "correct_option": 1,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué sucede si una entrada es llamada y la guarda no se cumple?",
      "options": [
        "La barrera se ignora.",
        "Se lanza una advertencia del compilador.",
        "La tarea queda bloqueada en una cola de espera.",
        "La entrada se ejecuta parcialmente."
      ],
      "correct_option": 2,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Es posible escribir una instrucción `select` en Ada que tenga una rama con `delay` y otra con `terminate`?",
      "options": [
        "Sí, si se usa dentro de un objeto protegido.",
        "No, Ada no permite combinar `delay` y `terminate` en ramas separadas de un mismo `select ... or`.",
        "Sí, pero solo si no hay más de dos ramas.",
        "Sí, siempre que `terminate` vaya al final."
      ],
      "correct_option": 1,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Por qué es útil usar `when Dato /= 0` en una entrada de tipo `Extraer`?",
      "options": [
        "Evita que se intente extraer del buffer cuando está vacío.",
        "Elimina la necesidad de tareas consumidoras.",
        "Obliga al productor a producir más rápido.",
        "Reduce el uso de memoria."
      ],
      "correct_option": 0,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué componente define la condición de activación de una entrada?",
      "options": [
        "La cláusula `or`.",
        "El tipo de dato de entrada.",
        "El cuerpo del `accept`.",
        "La guarda (`when`)."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué ocurre si se eliminan las guardas en el buffer?",
      "options": [
        "Las tareas se ejecutan más rápido.",
        "El sistema se vuelve más eficiente.",
        "El buffer se limpia automáticamente.",
        "El sistema puede quedar bloqueado o generar errores."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Cuál es la principal diferencia entre un procedimiento y una entrada?",
      "options": [
        "La entrada no permite condiciones.",
        "El procedimiento no necesita parámetros.",
        "La entrada no puede tener cuerpo.",
        "La entrada puede sincronizar tareas; el procedimiento no."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Cuál de las siguientes afirmaciones es FALSA respecto a los tipos privados?",
      "options": [
        "Mejoran el encapsulamiento del código.",
        "Ocultan la implementación al usuario.",
        "Solo se pueden manipular a través de operaciones del paquete.",
        "Permiten que el usuario acceda directamente a los campos del tipo."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué permiten las guardas (`when`) en una entrada?",
      "options": [
        "Evitan la creación de entradas duplicadas.",
        "Habilitan o deshabilitan dinámicamente una entrada según una condición.",
        "Hacen que una entrada se ejecute automáticamente.",
        "Permiten que varias tareas compartan una entrada."
      ],
      "correct_option": 1,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Por qué es importante la temporización en tareas concurrentes?",
      "options": [
        "Evita bloqueos y permite balancear la carga entre tareas.",
        "Asegura que todas las tareas finalicen en orden alfabético.",
        "Permite que las tareas no usen memoria.",
        "Evita que se ejecuten los `accept`."
      ],
      "correct_option": 0,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué instrucción se usa para terminar una tarea de forma controlada?",
      "options": ["exit;", "terminate;", "end;", "abort;"],
      "correct_option": 1,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Cuándo puede ejecutarse la cláusula `terminate` en una estructura `select`?",
      "options": [
        "Cuando se produce una excepción dentro de la tarea.",
        "Solo cuando la tarea está bloqueada por un `delay`.",
        "En cualquier momento, incluso si hay entradas activas.",
        "Cuando ninguna entrada está habilitada y la tarea principal ha terminado."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué tipo de sincronización básica se usa en Ada con `accept`?",
      "options": [
        "Exclusión mutua entre tareas protegidas.",
        "Sincronización entre tareas mediante espera activa.",
        "Acceso no bloqueante.",
        "Llamadas concurrentes sin esperar respuesta."
      ],
      "correct_option": 1,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué permite la instrucción `delay` dentro de una tarea?",
      "options": [
        "Finaliza la tarea inmediatamente.",
        "Duplica el contenido de la entrada.",
        "Evita que otras tareas accedan al buffer.",
        "Hace que la tarea espere cierto tiempo antes de continuar."
      ],
      "correct_option": 3,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué ocurre si una tarea usa `delay 1.0` dentro de un `select`?",
      "options": [
        "Se ignoran las entradas restantes.",
        "La tarea espera 1 segundo si no hay actividad.",
        "Se reinicia el buffer automáticamente.",
        "Se pausa el programa completo."
      ],
      "correct_option": 1,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué sucede si se usa `select` sin `when` ni `delay`?",
      "options": [
        "La tarea puede quedar bloqueada si no hay entradas disponibles.",
        "La tarea se ejecuta en paralelo sin esperas.",
        "Todas las entradas se ejecutan automáticamente.",
        "El compilador lanza un error de sintaxis."
      ],
      "correct_option": 0,
      "questionType": "singleChoice"
    },
    {
      "question": "¿Qué ocurre si se intenta combinar una cláusula `delay` y una cláusula `terminate` dentro del mismo bloque `select ... or`?",
      "options": [
        "La tarea finalizará siempre por la cláusula `terminate`.",
        "El programa compilará pero puede bloquearse en tiempo de ejecución.",
        "El compilador mostrará un error porque esta combinación no está permitida.",
        "Solo funciona si se usa `delay until` en lugar de `delay`."
      ],
      "correct_option": 2,
      "questionType": "singleChoice"
    }
  ]
}
